import random
actions = ['rock', 'paper', 'scissors']
Q={'rock': {'rock': 0, 'paper': 0, 'scissors': 0},
    'paper': {'rock': 0, 'paper': 0, 'scissors': 0},
    'scissors': {'rock': 0, 'paper': 0, 'scissors': 0}}
alpha = 0.1
gamma = 0.9
def update_Q_table(state, action, reward, next_state):
    #Q[state][action] += alpha * (reward + gamma * max(Q[next_state].values()) - Q[state][action])
    Q[state][action] += reward
def learn():
    state = random.choice(actions)
    while True:
        action = random.choice(actions)
        if action == state:
            reward = 0.5
        elif (action == 'rock' and state == 'scissors') or (action == 'paper' and state == 'rock') or (action == 'scissors' and state == 'paper'):
            reward = 1.0
        else:
            reward = 0.0
        next_state = action
        update_Q_table(state, action, reward, next_state)
        state = next_state
        if max(Q[state].values()) >= 0.9:
            return max(Q[state], key=Q[state].get)
for i in range(10000):
    learn()
print(Q)
print(max(Q['rock'], key=Q['rock'].get))
